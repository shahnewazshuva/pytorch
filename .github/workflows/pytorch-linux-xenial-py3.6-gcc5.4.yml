# WARNING THIS IS AUTOGENERATED DO NOT UPDATE MANUALLY PLS
# Template is at:    .github/templates/linux_ci_workflow.yml
# Generation script: .github/scripts/generate_linux_ci_workflows.py
name: Linux CI (pytorch-linux-xenial-py3.6-gcc5.4)

on:
  pull_request:
  push:
    branches:
      - master
      - release/*
  workflow_dispatch:

env:
  BUILD_ENVIRONMENT: pytorch-linux-xenial-py3.6-gcc5.4
  DOCKER_IMAGE_BASE: 308535385114.dkr.ecr.us-east-1.amazonaws.com/pytorch/pytorch-linux-xenial-py3.6-gcc5.4
  SCCACHE_BUCKET: ossci-compiler-cache-circleci-v2
  TORCH_CUDA_ARCH_LIST: 5.2
  IN_CI: 1

jobs:
  calculate-docker-image:
    runs-on: ubuntu-18.04
    outputs:
      docker_image: ${{ steps.calculate-tag.outputs.docker_image }}
    steps:
      - name: Checkout PyTorch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Calculate docker image tag
        id: calculate-tag
        run: |
          DOCKER_TAG=$(git rev-parse HEAD:.circleci/docker)
          echo "::set-output name=docker_image::${DOCKER_IMAGE_BASE}:${DOCKER_TAG}"
  build:
    runs-on: linux.2xlarge
    needs: calculate-docker-image
    env:
      DOCKER_IMAGE: ${{ needs.calculate-docker-image.outputs.docker_image }}
    steps:
      - name: Chown workspace
        run: |
          # Ensure the working directory gets chowned back to the current user
          docker run --rm -v "$(pwd)":/v -w /v alpine chown -R "$(id -u):$(id -g)" .
      - name: Checkout PyTorch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: recursive
      - name: Log in to ECR
        run: |
          $(aws ecr get-login --no-include-email --region us-east-1)
      - name: Pull docker image
        run: |
          docker pull "${DOCKER_IMAGE}"
      - name: Build PyTorch
        run: |
          SCCACHE_MAX_JOBS=$(( $(nproc) - 1 ))
          MEMORY_LIMIT_MAX_JOBS=8  # the "large" resource class on CircleCI has 32 CPU cores, if we use all of them we'll OOM
          MAX_JOBS=$(( ${SCCACHE_MAX_JOBS} > ${MEMORY_LIMIT_MAX_JOBS} ? ${MEMORY_LIMIT_MAX_JOBS} : ${SCCACHE_MAX_JOBS} ))
          docker run \
            -e BUILD_ENVIRONMENT \
            -e MAX_JOBS \
            -e SCCACHE_BUCKET \
            -e SKIP_SCCACHE_INITIALIZATION=1 \
            -e TORCH_CUDA_ARCH_LIST \
            --security-opt seccomp=unconfined \
            --cap-add=SYS_PTRACE \
            --tty \
            --user jenkins \
            -v ${GITHUB_WORKSPACE}:/var/lib/jenkins/workspace \
            -w /var/lib/jenkins/workspace \
            ${DOCKER_IMAGE} \
            sh -c 'sudo chown -R jenkins . && .jenkins/pytorch/build.sh'
      - name: Chown workspace
        run: |
          # Ensure the working directory gets chowned back to the current user
          docker run --rm -v "$(pwd)":/v -w /v alpine chown -R "$(id -u):$(id -g)" .
      - uses: actions/upload-artifact@v2
        name: Store PyTorch Build Artifacts
        with:
          name: ${{ env.BUILD_ENVIRONMENT }}
          retention-days: 30
          if-no-files-found: error
          path:
            ${{ github.workspace }}/dist/**/*
            ${{ github.workspace }}/build/**/*
      - name: Clean up docker images
        if: always()
        run: |
          # Prune all of the docker images
          docker system prune -af
  test:
    runs-on: linux.2xlarge
    needs:
      - calculate-docker-image
      - build
    env:
      DOCKER_IMAGE: ${{ needs.calculate-docker-image.outputs.docker_image }}
    steps:
      - name: Chown workspace
        run: |
          # Ensure the working directory gets chowned back to the current user
          docker run --rm -v "$(pwd)":/v -w /v alpine chown -R "$(id -u):$(id -g)" .
      - name: Checkout PyTorch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: recursive
      - name: Log in to ECR
        run: |
          $(aws ecr get-login --no-include-email --region us-east-1)
      - name: Pull docker image
        run: |
          docker pull "${DOCKER_IMAGE}"
      - uses: actions/download-artifact@v2
        name: Download PyTorch Build Artifacts
        with:
          name: ${{ env.BUILD_ENVIRONMENT }}
      - name: Test PyTorch
        run: |
          docker run \
            -e BUILD_ENVIRONMENT \
            -e IN_CI \
            --security-opt seccomp=unconfined \
            --cap-add=SYS_PTRACE \
            --tty \
            --user jenkins \
            -v ${GITHUB_WORKSPACE}:/var/lib/jenkins/workspace \
            -w /var/lib/jenkins/workspace \
            ${DOCKER_IMAGE} \
            sh -c 'sudo chown -R jenkins . && pip install dist/*.whl && .jenkins/pytorch/test.sh'
      - name: Report test results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          comment_on_pr: false
          pull_request_build: commit
          files: test/test-reports/**/*.xml
      - name: Clean up docker images
        if: always()
        run: |
          # Ensure the working directory gets chowned back to the current user
          docker run --rm -v "$(pwd)":/v -w /v alpine chown -R "$(id -u):$(id -g)" .
          # Prune all of the docker images
          docker system prune -af